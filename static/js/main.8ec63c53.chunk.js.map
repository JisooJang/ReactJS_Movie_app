{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","className","MovieGenre","_ref3","genre","Movie","_ref","title","genres","synopsis","rating","build_default","starRatedColor","numberOfStars","name","starDimension","starSpacing","starEmptyColor","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","_this","movies","movie","src_Movie","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","fetch","then","response","json","data","catch","err","console","log","_loadingMovies","override","css","_templateObject","dist","sizeUnit","size","color","loading","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8ec63c53.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Movie.css';\r\nimport PropTypes from 'prop-types';\r\nimport LinesEllipsis from 'react-lines-ellipsis';\r\nimport StarRatings from 'react-star-ratings';\r\n\r\n// 컴포넌트2. 각 영화 리스트 박스 컴포넌트\r\n/*\r\nclass Movie extends Component {\r\n\r\n    static propTypes = {\r\n        title: PropTypes.string.isRequired,\r\n        poster: PropTypes.string.isRequired\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <MoviePoster poster={this.props.poster}/>\r\n                <h1>{this.props.title}</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n*/\r\n\r\nfunction Movie({title, poster, genres, synopsis, rating}) {\r\n    return (\r\n        <div className=\"Movie\"> \r\n            <div className=\"Movie__Column\">\r\n                <MoviePoster poster={poster} alt={title} />\r\n            </div>\r\n            <div className=\"Movie__Column\">\r\n                <h1>{title}</h1>\r\n                <div className=\"Movie_Rating\">\r\n                    <StarRatings\r\n                        rating={rating / 2}\r\n                        starRatedColor=\"yellow\"\r\n                        numberOfStars={5}\r\n                        name='rating'\r\n                        starDimension=\"30px\"\r\n                        starSpacing=\"5px\"\r\n                        starEmptyColor=\"grey\"\r\n                    />\r\n                </div>\r\n                <div className=\"Movie_Genres\">\r\n                    {genres.map((genre, index) => <MovieGenre genre={genre} key={index} /> )}\r\n                </div>\r\n                <div className=\"Movie_Synopsis\">\r\n                    <LinesEllipsis\r\n                        text={synopsis}\r\n                        maxLine='3'\r\n                        ellipsis='...'\r\n                        trimRight\r\n                        basedOn='letters'\r\n                    />\r\n                </div>\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n// 컴포넌트3. 각 영화 포스터 이미지 컴포넌트.\r\n/*\r\nclass MoviePoster extends Component {\r\n\r\n    static propTypes = {\r\n        poster: PropTypes.string.isRequired\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <img src={this.props.poster} alt=\"Movie Poster\"/>\r\n        );\r\n    }\r\n}\r\n*/\r\n\r\n\r\nfunction MoviePoster({poster, alt}) {\r\n    return (\r\n        <img src={poster} alt={alt} className=\"Movie__Poster\"/>\r\n    );\r\n}\r\n\r\nfunction MovieGenre({genre}) {\r\n    return (\r\n        <span className=\"Movie_Genre\">{genre} </span>\r\n    )\r\n}\r\n\r\nMovie.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.array.isRequired,\r\n    synopsis: PropTypes.string.isRequired,\r\n    rating: PropTypes.number.isRequired\r\n}\r\n\r\nMoviePoster.propTypes = {\r\n    poster: PropTypes.string.isRequired,\r\n    alt: PropTypes.string.isRequired\r\n}\r\n\r\nMovieGenre.propTypes = {\r\n    genre: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Movie;","import React, { Component } from 'react';\nimport './App.css';\nimport { css } from '@emotion/core';\nimport { ClipLoader } from \"react-spinners\";\nimport Movie from './Movie';\n\nclass App extends Component {\n\n// Component rendering 순서 : componentWillMount() -> render() -> componentDidMount()\n\n// Component Updating 순서 : componentWillReceiveProps() -> shouldComponentUpdate() -> componentWillUpdate() -> render() -> componentDidUpdate()\n\n  componentWillMount() {\n    console.log('will mount');\n  }\n\n  state = {}\n\n  componentDidMount() {\n    this._getMovies();\n  }\n\n  // state값은 직접적으로 변경하면 안되고, setState 메소드를 통해 간접 변경해야함.\n  // setState는 우리가 보고있는 브라우저 전체 페이지를 새로고침하지 않고 단지 state변화가 있는 그 컴포넌트만 새로고침합니다.\n  // state값이 변경되면, render()이 재동작한다. 새로운 state값과 함께\n\n  \n  // function\n  _renderMovies = () => {\n    const movies = this.state.movies.map((movie) => {\n      return <Movie \n        title={movie.title}\n        poster={movie.medium_cover_image} \n        key={movie.id} \n        genres={movie.genres}\n        synopsis={movie.synopsis}\n        rating={movie.rating}\n      />\n    })\n\n    return movies;\n  }\n\n  // async function\n  // callApi function으로부터 모든 데이터를 수신 완료하고 수행 \n  _getMovies = async () => {  \n    const movies = await this._callApi();   \n    this.setState({\n      movies\n    });\n  }\n\n  _callApi = () => {\n    return fetch('https://cors-anywhere.herokuapp.com/https://yts.am/api/v2/list_movies.json?sort_by=download_count')\n    .then(response => response.json())    // fetch()가 성공적으로 끝났으면 then 문장을 실행\n    .then(json => json.data.movies)   // _getMovies의 const movies 변수에 최종으로 전달(return)되는 데이터 \n    .catch(err => console.log(err))             // fetch()가 오류가 나면, catch 문장을 실행\n  }\n\n  _loadingMovies = () => {\n    const override = css`\n    display: block;\n    margin: 0 auto;\n    border-color: red;\n    align: center;\n    margin-left: 20px;\n    `;\n    \n    return (\n      <div className=\"App--loading2\">\n        <ClipLoader\n          css={override}\n          sizeUnit={\"px\"}\n          size={40}\n          color={'#36D7B7'}\n          loading={this.state.loading}\n          />\n          <p>Loading...</p>\n      </div>\n    )\n     \n  }\n  \n  render() {  // Movie 컴포넌트를 불러온후 렌더링.\n    console.log('did render');\n    const { movies } = this.state;\n    console.log(movies);\n    return (\n      <div className={movies ? \"App\" : \"App--loading\"}>\n        {this.state.movies ? this._renderMovies() : this._loadingMovies()}\n      </div>\n    );\n  }\n}\n\n// 자식 컴포넌트에서 리스트같이 많은 양의 데이터를 다룰때, 각 컴포넌트들은 고유한 값의 'key' 속성을 추가해줘야함.\n// Array.map() 메소드는 Array의 요소 하나하나를 mapping해서 새로운 Array를 만든다. '=>' 이는 콜백 function을 축약한 표현식\n//https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}